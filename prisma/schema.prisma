generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  phonenumber           String?                @unique
  phoneNumberVerified   DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  stores                Store[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model Store {
  id         String      @id @default(cuid())
  name       String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  face       Face[]       @relation("StoreToFace")
  hair       Hair[]       @relation("StoreToHair")
  makeup     Makeup[]     @relation("StoreToMakeup")
  body       Body[]       @relation("StoreToBody")
  combos     Combos[]     @relation("StoreToCombos")
  ingredient Ingredient[] @relation("StoreToIngredient")
  fragrance  Fragrance[]  @relation("StoreToFragrance")
  price   Price[]          @relation("StoreToPrice")

  Variant Variant[] @relation("StoreToVariant")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  billboardId String
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])

  @@index([storeId])
  @@index([billboardId])
}

model Face {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToFace", fields: [storeId], references: [id])
  Product   Product[]

  @@index([storeId])
}

model Hair {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToHair", fields: [storeId], references: [id])
  Product   Product[]

  @@index([storeId])
}

model Makeup {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToMakeup", fields: [storeId], references: [id])
  Product   Product[]

  @@index([storeId])
}

model Body {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToBody", fields: [storeId], references: [id])
  Product   Product[]

  @@index([storeId])
}

model Combos {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToCombos", fields: [storeId], references: [id])
  Product   Product[]

  @@index([storeId])
}

model Ingredient {
  id          String    @id @default(uuid())
  storeId     String
  images Image[]
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  store       Store     @relation("StoreToIngredient", fields: [storeId], references: [id])

  @@index([storeId])
  Product Product[]
  Variant Variant[] @relation("VariantToIngredient")
}

model Fragrance {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToFragrance", fields: [storeId], references: [id])
  Product   Product[]

  @@index([storeId])
}
model Price {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToPrice", fields: [storeId], references: [id])
  Product   Product[]

  @@index([storeId])
}

model Product {
  id           String   @id @default(uuid())
  name         String
  description  String

  isNewlaunch  Boolean @default(false)
  isBestseller Boolean @default(false)
  isFeatured   Boolean @default(false)
  isArchived   Boolean @default(false)
  storeId    String
  store      Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])

  variants    Variant[]

  images Image[]
  faceId       String?
  hairId       String?
  makeupId     String?
  bodyId       String?
  comboId      String?
  ingredientId String?
  fragranceId  String?
  priceId      String?
  face         Face?       @relation(fields: [faceId], references: [id])
  hair         Hair?       @relation(fields: [hairId], references: [id])
  makeup       Makeup?     @relation(fields: [makeupId], references: [id])
  body         Body?       @relation(fields: [bodyId], references: [id])
  combos       Combos?     @relation(fields: [comboId], references: [id])
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  fragrance    Fragrance?  @relation(fields: [fragranceId], references: [id])
  price        Price?      @relation(fields: [priceId],references: [id])

  // Timestamps
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Indexes
  @@index([storeId])
  @@index([categoryId])
  @@index([faceId])
  @@index([hairId])
  @@index([makeupId])
  @@index([bodyId])
  @@index([comboId])
  @@index([ingredientId])
  @@index([fragranceId])
  @@index([priceId])
}

model Variant {
  id        String  @id @default(uuid())
  name      String 
  variantsepQuant   String
  price     Decimal 
  inventory Int? 
  storeId   String
  store  Store   @relation("StoreToVariant", fields: [storeId], references: [id])

  images Image[] 
  ingredients Ingredient[] @relation("VariantToIngredient")
  OrderItem OrderItem[]

  productId String
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Image {
  id        String   @id @default(uuid())
  productId String?
  product   Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  cratedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  Variant   Variant? @relation(fields: [variantId], references: [id])
  variantId String?
  ingredientId String?
  ingredient Ingredient? @relation(fields: [ingredientId], references: [id])

  @@index([productId])
  @@index([variantId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])

  customerId  String
  customer    Customer    @relation(fields: [customerId], references: [id])


  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  email      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  variantId String
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  quantity  Int
  @@index([orderId])
  @@index([variantId])
}

model Customer {
  id        String    @id
  name      String
  email     String   @unique
  phone     String   
  address   String
  orders    Order[]  // One customer can have many orders
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model EmailVerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PhoneNumberVerificationToken {
  id          String   @id @default(uuid())
  phonenumber String   @unique
  token       String
  expires     DateTime

  @@unique([phonenumber, token])
}

model ResetPasswordEmailToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordPhoneToken {
  id          String   @id @default(cuid())
  phonenumber String
  token       String   @unique
  expires     DateTime

  @@unique([phonenumber, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}
