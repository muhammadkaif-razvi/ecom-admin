generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  phonenumber           String?                @unique
  phoneNumberVerified   DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  stores                Store[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model Store {
  id           String        @id @default(cuid())
  name         String
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  billboards   Billboard[]   @relation("StoreToBillboard")
  categories   Category[]    @relation("StoreToCategory")
  sizes        Size[]        @relation("StoreToSize")
  vehicleType  VehicleType[] @relation("StoreToVehicleType")
  fuelType     FuelType[]    @relation("StoreToFuelType")
  transmission Transmission[] @relation("StoreToTransmission")
  features     Features[]     @relation("StoreToFeatures")
  mileage      Mileage[]      @relation("StoreToMileage")
  seats        Seats[]       @relation("StoreToSeats")
  engine       Engine[]      @relation("StoreToEngine")
  airbag       Airbag[]      @relation("StoreToAirbag")
  products     Product[]     @relation("StoreToProduct")
  orders       Order[]       @relation("StoreToOrder")
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  billboardId String
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])

  @@index([storeId])
}

model VehicleType {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToVehicleType", fields: [storeId], references: [id])

  @@index([storeId])
}

model FuelType {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToFuelType", fields: [storeId], references: [id])

  @@index([storeId])
}

model Transmission {
  id        String    @id @default(uuid())
  storeId   String     

  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToTransmission", fields: [storeId], references: [id])
 
@@unique([storeId, name])
@@index([storeId])
}

model Features {
  id        String    @id @default(uuid())
  storeId   String    
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToFeatures", fields: [storeId], references: [id])

  @@index([storeId])
}

model Mileage {
  id        String    @id @default(uuid())
  storeId   String    
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToMileage", fields: [storeId], references: [id])

  @@index([storeId])
}

model Seats {
  id        String    @id @default(uuid())
  storeId   String    
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToSeats", fields: [storeId], references: [id])

  @@index([storeId])
}

model Engine {
  id        String    @id @default(uuid())
  storeId   String    
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToEngine", fields: [storeId], references: [id])

  @@index([storeId])
}

model Airbag {
  id        String    @id @default(uuid())
  storeId   String    
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToAirbag", fields: [storeId], references: [id])

  @@index([storeId])
}

model Product {
  id         String   @id @default(uuid())
  storeId    String
  store      Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  price      Decimal
  isFeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  sizeId     String
  size       Size     @relation(fields: [sizeId], references: [id])

  vehicleTypeId String
  vehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [id])

  fueltypeId String
  fuelType   FuelType @relation(fields: [fueltypeId], references: [id])

  transmissionId String
  transmission   Transmission @relation(fields: [transmissionId], references: [id])

  featuresId String
  features   Features @relation(fields: [featuresId], references: [id])

  mileageId String
  mileage   Mileage @relation(fields: [mileageId], references: [id])

  seatsId String
  seats   Seats  @relation(fields: [seatsId], references: [id])

  engineId String
  engine   Engine @relation(fields: [engineId], references: [id])

  airbagId String
  airbag   Airbag @relation(fields: [airbagId], references: [id])

  images     Image[]
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([vehicleTypeId])
  @@index([fueltypeId])
  @@index([transmissionId])
  @@index([featuresId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  cratedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  email      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
}

model EmailVerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PhoneNumberVerificationToken {
  id          String   @id @default(uuid())
  phonenumber String   @unique
  token       String
  expires     DateTime

  @@unique([phonenumber, token])
}

model ResetPasswordEmailToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordPhoneToken {
  id          String   @id @default(cuid())
  phonenumber String
  token       String   @unique
  expires     DateTime

  @@unique([phonenumber, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}
